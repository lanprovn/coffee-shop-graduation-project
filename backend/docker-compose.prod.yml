version: '3.8'

services:
  # Database Services
  postgres-users:
    image: postgres:15-alpine
    container_name: postgres-users-prod
    environment:
      POSTGRES_DB: ${POSTGRES_USERS_DB:coffeeshop_users}
      POSTGRES_USER: ${POSTGRES_USER:postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_USERS_PORT:5432}:5432"
    volumes:
      - postgres_users_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql:ro
    networks:
      - coffee-shop-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:postgres} -d ${POSTGRES_USERS_DB:coffeeshop_users}" ]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres-products:
    image: postgres:15-alpine
    container_name: postgres-products-prod
    environment:
      POSTGRES_DB: ${POSTGRES_PRODUCTS_DB:coffeeshop_products}
      POSTGRES_USER: ${POSTGRES_USER:postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:password}
    ports:
      - "${POSTGRES_PRODUCTS_PORT:5433}:5432"
    volumes:
      - postgres_products_data:/var/lib/postgresql/data
    networks:
      - coffee-shop-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:postgres} -d ${POSTGRES_PRODUCTS_DB:coffeeshop_products}" ]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres-orders:
    image: postgres:15-alpine
    container_name: postgres-orders-prod
    environment:
      POSTGRES_DB: ${POSTGRES_ORDERS_DB:coffeeshop_orders}
      POSTGRES_USER: ${POSTGRES_USER:postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:password}
    ports:
      - "${POSTGRES_ORDERS_PORT:5434}:5432"
    volumes:
      - postgres_orders_data:/var/lib/postgresql/data
    networks:
      - coffee-shop-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:postgres} -d ${POSTGRES_ORDERS_DB:coffeeshop_orders}" ]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres-payments:
    image: postgres:15-alpine
    container_name: postgres-payments-prod
    environment:
      POSTGRES_DB: ${POSTGRES_PAYMENTS_DB:coffeeshop_payments}
      POSTGRES_USER: ${POSTGRES_USER:postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:password}
    ports:
      - "${POSTGRES_PAYMENTS_PORT:5435}:5432"
    volumes:
      - postgres_payments_data:/var/lib/postgresql/data
    networks:
      - coffee-shop-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:postgres} -d ${POSTGRES_PAYMENTS_DB:coffeeshop_payments}" ]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres-loyalty:
    image: postgres:15-alpine
    container_name: postgres-loyalty-prod
    environment:
      POSTGRES_DB: ${POSTGRES_LOYALTY_DB:coffeeshop_loyalty}
      POSTGRES_USER: ${POSTGRES_USER:postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:password}
    ports:
      - "${POSTGRES_LOYALTY_PORT:5436}:5432"
    volumes:
      - postgres_loyalty_data:/var/lib/postgresql/data
    networks:
      - coffee-shop-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:postgres} -d ${POSTGRES_LOYALTY_DB:coffeeshop_loyalty}" ]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres-notifications:
    image: postgres:15-alpine
    container_name: postgres-notifications-prod
    environment:
      POSTGRES_DB: ${POSTGRES_NOTIFICATIONS_DB:coffeeshop_notifications}
      POSTGRES_USER: ${POSTGRES_USER:postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:password}
    ports:
      - "${POSTGRES_NOTIFICATIONS_PORT:5437}:5432"
    volumes:
      - postgres_notifications_data:/var/lib/postgresql/data
    networks:
      - coffee-shop-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:postgres} -d ${POSTGRES_NOTIFICATIONS_DB:coffeeshop_notifications}" ]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres-analytics:
    image: postgres:15-alpine
    container_name: postgres-analytics-prod
    environment:
      POSTGRES_DB: ${POSTGRES_ANALYTICS_DB:coffeeshop_analytics}
      POSTGRES_USER: ${POSTGRES_USER:postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:password}
    ports:
      - "${POSTGRES_ANALYTICS_PORT:5438}:5432"
    volumes:
      - postgres_analytics_data:/var/lib/postgresql/data
    networks:
      - coffee-shop-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:postgres} -d ${POSTGRES_ANALYTICS_DB:coffeeshop_analytics}" ]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres-stores:
    image: postgres:15-alpine
    container_name: postgres-stores-prod
    environment:
      POSTGRES_DB: ${POSTGRES_STORES_DB:coffeeshop_stores}
      POSTGRES_USER: ${POSTGRES_USER:postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:password}
    ports:
      - "${POSTGRES_STORES_PORT:5439}:5432"
    volumes:
      - postgres_stores_data:/var/lib/postgresql/data
    networks:
      - coffee-shop-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:postgres} -d ${POSTGRES_STORES_DB:coffeeshop_stores}" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis-prod
    ports:
      - "${REDIS_PORT:6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - coffee-shop-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "${PROMETHEUS_PORT:9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - coffee-shop-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "${GRAFANA_PORT:3000}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - coffee-shop-network
    restart: unless-stopped

  # Eureka Server
  eureka-server:
    build:
      context: .
      dockerfile: eureka-server/Dockerfile
    container_name: eureka-server-prod
    ports:
      - "${EUREKA_PORT:8761}:8761"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:prod}
      EUREKA_HOSTNAME: ${EUREKA_HOSTNAME:eureka-server}
      EUREKA_SELF_PRESERVATION: ${EUREKA_SELF_PRESERVATION:true}
      EUREKA_EVICTION_INTERVAL: ${EUREKA_EVICTION_INTERVAL:60000}
      EUREKA_RENEWAL_THRESHOLD: ${EUREKA_RENEWAL_THRESHOLD:0.85}
      LOG_LEVEL: ${LOG_LEVEL:INFO}
      LOG_FILE_PATH: ${LOG_FILE_PATH:/var/log/coffeeshop/eureka-server.log}
    networks:
      - coffee-shop-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/api/v1/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - postgres-users

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway-prod
    ports:
      - "${API_GATEWAY_PORT:8080}:8080"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:prod}
      EUREKA_URL: ${EUREKA_URL:http://eureka-server:8761/eureka/}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:5173}
      CORS_ALLOWED_METHODS: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
      CORS_ALLOWED_HEADERS: ${CORS_ALLOWED_HEADERS:*}
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:true}
      RATE_LIMIT_RPM: ${RATE_LIMIT_RPM:1000}
      RATE_LIMIT_BURST: ${RATE_LIMIT_BURST:2000}
      LOG_LEVEL: ${LOG_LEVEL:INFO}
      LOG_FILE_PATH: ${LOG_FILE_PATH:/var/log/coffeeshop/api-gateway.log}
    networks:
      - coffee-shop-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/api/v1/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - eureka-server
      - redis

  # User Service
  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    container_name: user-service-prod
    ports:
      - "${USER_SERVICE_PORT:8081}:8081"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:prod}
      DB_HOST: ${DB_HOST:postgres-users}
      DB_PORT: ${DB_PORT:5432}
      DB_NAME: ${POSTGRES_USERS_DB:coffeeshop_users}
      DB_USERNAME: ${POSTGRES_USER:postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:password}
      REDIS_HOST: ${REDIS_HOST:redis}
      REDIS_PORT: ${REDIS_PORT:6379}
      EUREKA_URL: ${EUREKA_URL:http://eureka-server:8761/eureka/}
      JPA_DDL_AUTO: ${JPA_DDL_AUTO:validate}
      JPA_SHOW_SQL: ${JPA_SHOW_SQL:false}
      LOG_LEVEL: ${LOG_LEVEL:INFO}
      LOG_FILE_PATH: ${LOG_FILE_PATH:/var/log/coffeeshop/user-service.log}
    networks:
      - coffee-shop-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/api/v1/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres-users:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Product Service
  product-service:
    build:
      context: .
      dockerfile: product-service/Dockerfile
    container_name: product-service-prod
    ports:
      - "${PRODUCT_SERVICE_PORT:8082}:8082"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:prod}
      DB_HOST: ${DB_HOST:postgres-products}
      DB_PORT: ${DB_PORT:5432}
      DB_NAME: ${POSTGRES_PRODUCTS_DB:coffeeshop_products}
      DB_USERNAME: ${POSTGRES_USER:postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:password}
      REDIS_HOST: ${REDIS_HOST:redis}
      REDIS_PORT: ${REDIS_PORT:6379}
      EUREKA_URL: ${EUREKA_URL:http://eureka-server:8761/eureka/}
      JPA_DDL_AUTO: ${JPA_DDL_AUTO:validate}
      JPA_SHOW_SQL: ${JPA_SHOW_SQL:false}
      LOG_LEVEL: ${LOG_LEVEL:INFO}
      LOG_FILE_PATH: ${LOG_FILE_PATH:/var/log/coffeeshop/product-service.log}
    networks:
      - coffee-shop-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/api/v1/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres-products:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Order Service
  order-service:
    build:
      context: .
      dockerfile: order-service/Dockerfile
    container_name: order-service-prod
    ports:
      - "${ORDER_SERVICE_PORT:8083}:8083"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:prod}
      DB_HOST: ${DB_HOST:postgres-orders}
      DB_PORT: ${DB_PORT:5432}
      DB_NAME: ${POSTGRES_ORDERS_DB:coffeeshop_orders}
      DB_USERNAME: ${POSTGRES_USER:postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:password}
      REDIS_HOST: ${REDIS_HOST:redis}
      REDIS_PORT: ${REDIS_PORT:6379}
      EUREKA_URL: ${EUREKA_URL:http://eureka-server:8761/eureka/}
      JPA_DDL_AUTO: ${JPA_DDL_AUTO:validate}
      JPA_SHOW_SQL: ${JPA_SHOW_SQL:false}
      LOG_LEVEL: ${LOG_LEVEL:INFO}
      LOG_FILE_PATH: ${LOG_FILE_PATH:/var/log/coffeeshop/order-service.log}
    networks:
      - coffee-shop-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/api/v1/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres-orders:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Payment Service
  payment-service:
    build:
      context: .
      dockerfile: payment-service/Dockerfile
    container_name: payment-service-prod
    ports:
      - "${PAYMENT_SERVICE_PORT:8084}:8084"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:prod}
      DB_HOST: ${DB_HOST:postgres-payments}
      DB_PORT: ${DB_PORT:5432}
      DB_NAME: ${POSTGRES_PAYMENTS_DB:coffeeshop_payments}
      DB_USERNAME: ${POSTGRES_USER:postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:password}
      REDIS_HOST: ${REDIS_HOST:redis}
      REDIS_PORT: ${REDIS_PORT:6379}
      EUREKA_URL: ${EUREKA_URL:http://eureka-server:8761/eureka/}
      JPA_DDL_AUTO: ${JPA_DDL_AUTO:validate}
      JPA_SHOW_SQL: ${JPA_SHOW_SQL:false}
      LOG_LEVEL: ${LOG_LEVEL:INFO}
      LOG_FILE_PATH: ${LOG_FILE_PATH:/var/log/coffeeshop/payment-service.log}
    networks:
      - coffee-shop-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8084/api/v1/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres-payments:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Loyalty Service
  loyalty-service:
    build:
      context: .
      dockerfile: loyalty-service/Dockerfile
    container_name: loyalty-service-prod
    ports:
      - "${LOYALTY_SERVICE_PORT:8085}:8085"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:prod}
      DB_HOST: ${DB_HOST:postgres-loyalty}
      DB_PORT: ${DB_PORT:5432}
      DB_NAME: ${POSTGRES_LOYALTY_DB:coffeeshop_loyalty}
      DB_USERNAME: ${POSTGRES_USER:postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:password}
      REDIS_HOST: ${REDIS_HOST:redis}
      REDIS_PORT: ${REDIS_PORT:6379}
      EUREKA_URL: ${EUREKA_URL:http://eureka-server:8761/eureka/}
      JPA_DDL_AUTO: ${JPA_DDL_AUTO:validate}
      JPA_SHOW_SQL: ${JPA_SHOW_SQL:false}
      LOG_LEVEL: ${LOG_LEVEL:INFO}
      LOG_FILE_PATH: ${LOG_FILE_PATH:/var/log/coffeeshop/loyalty-service.log}
    networks:
      - coffee-shop-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8085/api/v1/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres-loyalty:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: notification-service/Dockerfile
    container_name: notification-service-prod
    ports:
      - "${NOTIFICATION_SERVICE_PORT:8086}:8086"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:prod}
      DB_HOST: ${DB_HOST:postgres-notifications}
      DB_PORT: ${DB_PORT:5432}
      DB_NAME: ${POSTGRES_NOTIFICATIONS_DB:coffeeshop_notifications}
      DB_USERNAME: ${POSTGRES_USER:postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:password}
      REDIS_HOST: ${REDIS_HOST:redis}
      REDIS_PORT: ${REDIS_PORT:6379}
      EUREKA_URL: ${EUREKA_URL:http://eureka-server:8761/eureka/}
      JPA_DDL_AUTO: ${JPA_DDL_AUTO:validate}
      JPA_SHOW_SQL: ${JPA_SHOW_SQL:false}
      MAIL_HOST: ${MAIL_HOST:smtp.gmail.com}
      MAIL_PORT: ${MAIL_PORT:587}
      MAIL_USERNAME: ${MAIL_USERNAME:}
      MAIL_PASSWORD: ${MAIL_PASSWORD:}
      EMAIL_NOTIFICATIONS_ENABLED: ${EMAIL_NOTIFICATIONS_ENABLED:true}
      EMAIL_FROM: ${EMAIL_FROM:noreply@coffeeshop.com}
      SMS_NOTIFICATIONS_ENABLED: ${SMS_NOTIFICATIONS_ENABLED:false}
      PUSH_NOTIFICATIONS_ENABLED: ${PUSH_NOTIFICATIONS_ENABLED:true}
      FIREBASE_SERVER_KEY: ${FIREBASE_SERVER_KEY:}
      LOG_LEVEL: ${LOG_LEVEL:INFO}
      LOG_FILE_PATH: ${LOG_FILE_PATH:/var/log/coffeeshop/notification-service.log}
    networks:
      - coffee-shop-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8086/api/v1/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres-notifications:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Analytics Service
  analytics-service:
    build:
      context: .
      dockerfile: analytics-service/Dockerfile
    container_name: analytics-service-prod
    ports:
      - "${ANALYTICS_SERVICE_PORT:8087}:8087"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:prod}
      DB_HOST: ${DB_HOST:postgres-analytics}
      DB_PORT: ${DB_PORT:5432}
      DB_NAME: ${POSTGRES_ANALYTICS_DB:coffeeshop_analytics}
      DB_USERNAME: ${POSTGRES_USER:postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:password}
      REDIS_HOST: ${REDIS_HOST:redis}
      REDIS_PORT: ${REDIS_PORT:6379}
      EUREKA_URL: ${EUREKA_URL:http://eureka-server:8761/eureka/}
      JPA_DDL_AUTO: ${JPA_DDL_AUTO:validate}
      JPA_SHOW_SQL: ${JPA_SHOW_SQL:false}
      LOG_LEVEL: ${LOG_LEVEL:INFO}
      LOG_FILE_PATH: ${LOG_FILE_PATH:/var/log/coffeeshop/analytics-service.log}
    networks:
      - coffee-shop-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8087/api/v1/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres-analytics:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Store Service
  store-service:
    build:
      context: .
      dockerfile: store-service/Dockerfile
    container_name: store-service-prod
    ports:
      - "${STORE_SERVICE_PORT:8088}:8088"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:prod}
      DB_HOST: ${DB_HOST:postgres-stores}
      DB_PORT: ${DB_PORT:5432}
      DB_NAME: ${POSTGRES_STORES_DB:coffeeshop_stores}
      DB_USERNAME: ${POSTGRES_USER:postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:password}
      REDIS_HOST: ${REDIS_HOST:redis}
      REDIS_PORT: ${REDIS_PORT:6379}
      EUREKA_URL: ${EUREKA_URL:http://eureka-server:8761/eureka/}
      JPA_DDL_AUTO: ${JPA_DDL_AUTO:validate}
      JPA_SHOW_SQL: ${JPA_SHOW_SQL:false}
      LOG_LEVEL: ${LOG_LEVEL:INFO}
      LOG_FILE_PATH: ${LOG_FILE_PATH:/var/log/coffeeshop/store-service.log}
    networks:
      - coffee-shop-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8088/api/v1/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres-stores:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  postgres_users_data:
  postgres_products_data:
  postgres_orders_data:
  postgres_payments_data:
  postgres_loyalty_data:
  postgres_notifications_data:
  postgres_analytics_data:
  postgres_stores_data:
  redis_data:
  prometheus_data:
  grafana_data:


networks:
  coffee-shop-network:
    driver: bridge
